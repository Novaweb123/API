import requests
import base64
import mysql.connector
import csv
from datetime import datetime, timedelta

# MySQL database configuration
DB_CONFIG = {
    'host': '183.82.62.219',
    'user': 'dbuser',
    'password': 'A@123456',
    'database': 'stockandmanagement'
}

# ShipStation API configuration
SHIPSTATION_CONFIG = {
    'api_key': '995c95a21dd74d68a3565bc5cb7f3e36',
    'api_secret': 'f8687237ce9f47ba886568b2ccfe0752'
}

mydb = mysql.connector.connect(**DB_CONFIG)
mycursor = mydb.cursor()

end_date = datetime.now()
start_date = end_date - timedelta(days=10)

# Set the desired page size
page_size = 500

url = f'https://ssapi.shipstation.com/orders?orderDateStart={start_date.strftime("%Y-%m-%dT00:00:00")}&orderDateEnd={end_date.strftime("%Y-%m-%dT23:59:59")}&orderStatus=shipped&pageSize={page_size}'

api_key_secret = f"{SHIPSTATION_CONFIG['api_key']}:{SHIPSTATION_CONFIG['api_secret']}"
headers = {'Authorization': f'Basic {base64.b64encode(api_key_secret.encode()).decode()}'}

all_orders_data = []
next_page = 1

# Define error reasons dictionary
error_reasons = {}

while True:
    response = requests.get(url + f'&page={next_page}', headers=headers)
    data = response.json()

    orders_data = []
    for order in data.get('orders', []):
        for item in order.get('items', []):
            order_data = {
                'orderDate': order.get('orderDate'),
                'orderId': order.get('orderId'),
                'orderNumber': order.get('orderNumber')[:50],
		        'lineItemKey': item.get('lineItemKey'),
                'orderStatus': order.get('orderStatus'),
                'name': item.get('name'),
                'sku': item.get('sku'),
                'Quantity': item.get('quantity') if item.get('quantity') is not None else 0,  # Set to 0 if Quantity is None
                'state': order.get('shipTo', {}).get('state'),
                'shipDate': order.get('shipDate'),
                'Channel': order.get('advancedOptions', {}).get('storeId'),
                'shipped_from': order.get('advancedOptions', {}).get('warehouseId'),
                'Unit_price': item.get('unitPrice'),
                'taxAmount': order.get('taxAmount'),
                'shippingAmount': order.get('shippingAmount'),
            }

            # Skip rows with Channel = 493213 or Quantity = 0
            if order_data['Channel'] == '493213' or order_data['Quantity'] == 0:
                continue

            # Check if the order number already exists in the previously entered data table
            existing_order_sql = "SELECT COUNT(*) FROM Shipped_orders WHERE orderNumber = %s AND lineItemKey = %s AND sku = %s"
            mycursor.execute(existing_order_sql, (order_data['orderNumber'], order_data['lineItemKey'], order_data['sku']))
            result = mycursor.fetchone()
            if result[0] > 0:
                # Record the error reason
                error_reasons[order_data['orderNumber'], order_data['lineItemKey'], order_data['sku']] = 'Duplicate row'
                continue  # Skip inserting the row if the order number exists in the table

            orders_data.append(order_data)

    all_orders_data.extend(orders_data)

    if not data['pages'] or next_page >= data['pages']:
        break

    next_page += 1

if all_orders_data:
    rows_inserted = 0
    for order_data in all_orders_data:
        try:
            sql = "INSERT IGNORE INTO Shipped_orders (orderDate, orderId, orderNumber,lineItemKey, orderStatus, name, sku, Quantity, state, shipDate, Channel, shipped_from, Unit_price, taxAmount, shippingAmount) VALUES (%s,%s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"
            val = tuple(order_data.values())
            mycursor.execute(sql, val)
            mydb.commit()
            rows_inserted += 1

            # Call the first stored procedure
            mycursor.callproc('sp_shippedmskuupdate', (order_data['orderId'], order_data['orderNumber'], order_data['lineItemKey']))
            mydb.commit()

            # Call the second stored procedure
            mycursor.callproc('sp_UpdateInventoryOnShipment1', (order_data['orderId'], order_data['orderNumber'], order_data['lineItemKey']))
            mydb.commit()

        except mysql.connector.Error as err:
            # Record the error reason
            error_reasons[order_data['orderNumber']] = str(err)

# Close the database connection
mydb.close()

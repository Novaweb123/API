import requests
import base64
import mysql.connector

# Retrieve data from ShipStation API
api_key = '995c95a21dd74d68a3565bc5cb7f3e36'
api_secret = 'f8687237ce9f47ba886568b2ccfe0752'
base_url = 'https://ssapi.shipstation.com/orders'
page_size = 500  # Number of orders to retrieve per page

api_key_secret = f"{api_key}:{api_secret}"
headers = {'Authorization': f'Basic {base64.b64encode(api_key_secret.encode()).decode()}'}

orders_data = []
page = 1
total_pages = 1

while page <= total_pages:
    url = f'{base_url}?orderStatus=awaiting_shipment&page={page}&pageSize={page_size}'
    response = requests.get(url, headers=headers)
    data = response.json()

    if 'orders' in data:
        orders = data['orders']
        for order in orders:
            for item in order.get('items', []):
                order_data = {
                    'order_id': order.get('orderId'),
                    'order_number': order.get('orderNumber')[:50],
                    'order_date': order.get('orderDate'),
                    'order_status': order.get('orderStatus'),
                    'quantity': item.get('quantity'),
                    'unit_Price': item.get('unitPrice'),
                    'item_name': item.get('name'),
                    'SKU': item.get('sku'),
                    'State': order.get('shipTo', {}).get('state'),
                    'Channel': order.get('advancedOptions', {}).get('storeId'),
                    'customer_name': order.get('billTo', {}).get('name'),
                    'lineItemKey': item.get('lineItemKey')
                }
                orders_data.append(order_data)

    total_pages = data.get('pages', 1)
    page += 1

if not orders_data:
    print("No orders found.")
    exit()

# Connect to MySQL database with autocommit mode
try:
    mydb = mysql.connector.connect(
        host="183.82.62.219",
        user="dbuser",
        password="A@123456",
        database="stockandmanagement",
        autocommit=True  # Enable autocommit to avoid long transactions
    )
    print("Connected to MySQL database")
except mysql.connector.Error as err:
    print(f"MySQL Connection Error: {err}")
    exit(1)  # Exit the program if there's a connection error

mycursor = mydb.cursor()

# SQL query to select records with matching orderId, orderNumber, and lineItemKey
select_sql = "SELECT 1 FROM Unshipped_orders WHERE order_id = %s AND order_number = %s AND lineItemKey = %s LIMIT 1"

# SQL query to call the Sridhar_UpdateMSKUForUnshippedOrders stored procedure
call_procedure_sql = "CALL Sridhar_UpdateMSKUForUnshippedOrders(%s, %s)"

# SQL query to insert data into the Unshipped_orders table
sql = "INSERT INTO Unshipped_orders (order_id, order_number, order_date, order_status, quantity, unit_Price, item_name, SKU, State, Channel, customer_name, lineItemKey) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"

for order in orders_data:
    # Execute the select query to check for existing records
    mycursor.execute(select_sql, (order['order_id'], order['order_number'], order['lineItemKey']))
    result = mycursor.fetchone()

    if result:
        pass  # Skipping duplicate record
    else:
        try:
            # Insert the data into the Unshipped_orders table
            mycursor.execute(sql, tuple(order.values()))

            # Call the Sridhar_UpdateMSKUForUnshippedOrders procedure with SKU and Channel
            mycursor.execute(call_procedure_sql, (order['SKU'], order['Channel']))
        except mysql.connector.Error as err:
            print(f"MySQL Insert Error: {err}")

# Commit the changes
mydb.commit()

# Close the database connection
mycursor.close()
mydb.close()
